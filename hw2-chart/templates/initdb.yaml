apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-initdb"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      initContainers:
        - name: check-db-ready
          image: postgres:latest
          env:
            - name: POSTGRES_HOST
              value: {{ (include "postgresql.fullname" .) | quote }}
            - name: POSTGRES_PORT
              value: "{{ .Values.postgresql.service.port }}"
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h $POSTGRES_HOST  -p  $POSTGRES_PORT;
              do echo waiting for database; sleep 2; done;
      containers:
        - name: post-install-job
          image: alia1221/hw2:v1
          env:
            - name: DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: hw2app-secret
                  key: DATABASE_URI
          command:
              - sh
              - "-c"
              - |
                echo running script && python initdb.py
  backoffLimit: 0